package resource;import com.fasterxml.jackson.annotation.JsonCreator;import com.fasterxml.jackson.annotation.JsonProperty;import io.swagger.annotation.Api;import javax.validation.Valid;import javax.ws.rs.*;import javax.ws.rs.core.MediaType;import javax.ws.rs.core.Response;import java.math.BigDecimal;import java.util.GregorianCalendar;@Api("Kates ATM")@Path("v1/atm")@Produces(MediaType.APPLICATION_JSON)@Consumes(MediaType.APPLICATION_JSON)    public class AtmResourceV1 {    @GET    @Path("{cardNumber}")    public Response getCard(@BeanParam @Valid CardRequest request) {        Card card = buildCard(request.cardNumber);        CardResponse cardResponse = buildCardResponse(card);        return Response.status(Response.Status.OK).entity(cardResponse).build();    }    @GET    @Path("{cardNumber}/deposit")    public Response getDeposit(@BeanParam @Valid DepositRequest request) {        Card card = buildCard(request.cardNumber);        return Response.status(Response.Status.OK).entity(DepositResponse.newResponse(card, request.amount)).build();    }    @GET    @Path("{cardNumber}/withdraw")    public Response getWithdraw(@BeanParam @Valid WithdrawRequest request) throws Exception {        Card card = buildCard(request.cardNumber);        return Response.status(Response.Status.OK).entity(WithdrawResponse.newResponse(card, request.amount)).build();    }    private Card buildCard(int cardNumber) {        if(cardNumber%2 ==1) {            return new CreditCard(BigDecimal.valueOf(1000.00), "AAA", 1, new GregorianCalendar(2017, 12, 31));        }        return new DebitCard(BigDecimal.valueOf(2000.00), "BBB", 2, new GregorianCalendar(2018, 10, 31));    }    public CardResponse buildCardResponse (Card card) {        if(card instanceof CreditCard) {            return new CreditCardResponse(card);        }        if(card instanceof DebitCard) {            return new DebitCardResponse(card);        }        throw new NotSupportedException("Unknown card type");    }}